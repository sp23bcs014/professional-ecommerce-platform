// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  action    String
  entity    String
  entityId  Int?
  details   String?
  createdAt DateTime @default(now())
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  password       String
  name           String?
  avatar         String?
  createdAt      DateTime         @default(now())
  isAdmin        Boolean          @default(false)
  cart           Cart?
  orders         Order[]
  reviews        Review[]
  activityLogs   ActivityLog[]
  wishlist       Wishlist?
  recentlyViewed RecentlyViewed[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  imageUrl    String?
  slug        String    @unique
  createdAt   DateTime  @default(now())
  products    Product[]
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  price          Float
  imageUrl       String?
  sku            String?          @unique
  stock          Int              @default(0)
  tags           String?
  isActive       Boolean          @default(true)
  views          Int              @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  categoryId     Int?
  category       Category?        @relation(fields: [categoryId], references: [id])
  cartItems      CartItem[]
  orderItems     OrderItem[]
  reviews        Review[]
  wishlistItems  WishlistItem[]
  images         ProductImage[]
  variants       ProductVariant[]
  recentlyViewed RecentlyViewed[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  imageUrl  String
  altText   String?
  isPrimary Boolean @default(false)
  sortOrder Int     @default(0)
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  name      String
  value     String
  price     Float?
  stock     Int     @default(0)
  sku       String?
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int     @default(1)
}

model Wishlist {
  id        Int            @id @default(autoincrement())
  user      User           @relation(fields: [userId], references: [id])
  userId    Int            @unique
  items     WishlistItem[]
  createdAt DateTime       @default(now())
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  createdAt  DateTime @default(now())

  @@unique([wishlistId, productId])
}

model Order {
  id              Int         @id @default(autoincrement())
  user            User        @relation(fields: [userId], references: [id])
  userId          Int
  items           OrderItem[]
  total           Float
  subtotal        Float?
  discount        Float?      @default(0)
  tax             Float?      @default(0)
  shipping        Float?      @default(0)
  status          String      @default("pending")
  createdAt       DateTime    @default(now())
  trackingNumber  String?
  trackingStatus  String?
  coupon          Coupon?     @relation(fields: [couponId], references: [id])
  couponId        Int?
  shippingAddress String?
  billingAddress  String?
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int     @default(1)
  price     Float
}

model Coupon {
  id            Int      @id @default(autoincrement())
  code          String   @unique
  description   String?
  discountType  String
  discountValue Float
  minimumAmount Float?
  maxUses       Int?
  usedCount     Int      @default(0)
  isActive      Boolean  @default(true)
  validFrom     DateTime
  validUntil    DateTime
  createdAt     DateTime @default(now())
  orders        Order[]
}

model Review {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Newsletter {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  isActive     Boolean  @default(true)
  subscribedAt DateTime @default(now())
}

model RecentlyViewed {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  viewedAt  DateTime @default(now())

  @@unique([userId, productId])
}
